Here are the Git commands for each task step-by-step:

---

### **Task 1**
#### **Steps to Create a Folder, Add Files, Stage, Commit, and Push**
1. **Create a New Folder:**
   ```bash
   mkdir new_folder
   cd new_folder
   ```

2. **Create Files:**
   ```bash
   touch Code.txt Log.txt Output.txt
   ```

3. **Initialize Git Repository:**
   ```bash
   git init
   ```

4. **Stage Specific Files (`Code.txt` and `Output.txt`):**
   ```bash
   git add Code.txt Output.txt
   ```

5. **Commit the Changes:**
   ```bash
   git commit -m "Added Code.txt and Output.txt"
   ```

6. **Add Remote and Push to GitHub:**
   ```bash
   git remote add origin git@github.com:<username>/<repository>.git
   git push -u origin main
   ```

---

### **Task 2**
#### **Steps for Branching, Stashing, and Committing**
1. **Create a Git Working Directory:**
   ```bash
   mkdir git_directory
   cd git_directory
   git init
   touch feature1.txt feature2.txt
   git add feature1.txt feature2.txt
   git commit -m "Added feature1.txt and feature2.txt"
   ```

2. **Create New Branches:**
   ```bash
   git branch develop
   git branch feature1
   git branch feature2
   ```

3. **Switch to `develop` and Create `develop.txt`:**
   ```bash
   git checkout develop
   touch develop.txt
   ```

4. **Stash `develop.txt` (Do Not Stage or Commit):**
   ```bash
   git stash
   ```

5. **Switch to `feature1` and Create `new.txt`:**
   ```bash
   git checkout feature1
   touch new.txt
   git add new.txt
   git commit -m "Added new.txt to feature1 branch"
   ```

6. **Switch Back to `develop`, Unstash, and Commit:**
   ```bash
   git checkout develop
   git stash pop
   git add develop.txt
   git commit -m "Added develop.txt from stash"
   ```

---

### **Task 3**
#### **Steps for Managing Branches and Files**
1. **Create the Git Working Directory:**
   ```bash
   mkdir branches_directory
   cd branches_directory
   git init
   ```

2. **Create Branches `develop`, `F1`, and `F2`:**
   ```bash
   git branch develop
   git branch F1
   git branch F2
   ```

3. **Add and Commit `main.txt` on Master:**
   ```bash
   touch main.txt
   git add main.txt
   git commit -m "Added main.txt on master"
   ```

4. **Switch to Each Branch and Add Specific Files:**
   ```bash
   git checkout develop
   touch develop.txt
   git add develop.txt
   git commit -m "Added develop.txt on develop branch"

   git checkout F1
   touch f1.txt
   git add f1.txt
   git commit -m "Added f1.txt on F1 branch"

   git checkout F2
   touch f2.txt
   git add f2.txt
   git commit -m "Added f2.txt on F2 branch"
   ```

5. **Push All Branches to GitHub:**
   ```bash
   git push -u origin --all
   ```

6. **Delete `F2` Locally and Remotely:**
   ```bash
   git branch -d F2
   git push origin --delete F2
   ```

---

### **Task 4**
#### **Steps for Branch Merging and Updating Code**
1. **Add `master.txt` to Master:**
   ```bash
   git checkout master
   touch master.txt
   git add master.txt
   git commit -m "Added master.txt"
   ```

2. **Create Branches:**
   ```bash
   git branch public1
   git branch public2
   git branch private
   ```

3. **Add and Commit `public1.txt`:**
   ```bash
   git checkout public1
   touch public1.txt
   git add public1.txt
   git commit -m "Added public1.txt on public1 branch"
   ```

4. **Merge `public1` and `public2` into `master`:**
   ```bash
   git checkout master
   git merge public1
   git merge public2
   ```

5. **Edit `master.txt` on Private Branch:**
   ```bash
   git checkout private
   echo "Private changes" >> master.txt
   git add master.txt
   git commit -m "Updated master.txt on private branch"
   ```

6. **Update Public Branches with New Master Code:**
   ```bash
   git checkout public1
   git merge master

   git checkout public2
   git merge master
   ```

7. **Update Private Branch with New Master Code:**
   ```bash
   git checkout private
   git merge master
   ```

---

### **Task 5**
#### **Steps for Git Flow Workflow**
1. **Initialize Repository:**
   ```bash
   git init
   ```

2. **Create Branches According to Git Flow:**
   ```bash
   git branch develop
   git branch feature
   git branch release
   git branch hotfix
   ```

3. **Push Feature Branch to Master:**
   ```bash
   git checkout feature
   touch feature_file.txt
   git add feature_file.txt
   git commit -m "Added feature_file.txt"
   git checkout master
   git merge feature
   ```

4. **Push `urgent.txt` Using Hotfix:**
   ```bash
   git checkout hotfix
   touch urgent.txt
   git add urgent.txt
   git commit -m "Added urgent.txt for hotfix"
   git checkout master
   git merge hotfix
   ```

---

Let me know if you need further clarification! ðŸ˜Š
